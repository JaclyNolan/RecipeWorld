@attribute [Route(RecipeWorld.Constants.RouteNames.Recipe.List)] 
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IRecipeService _recipeService
@using RecipeWorld.Shared.Entities
@using RecipeWorld.Shared.DTOs
@using RecipeWorld.Services

<PageTitle>Recipe List</PageTitle>

<Container>
    <Table Hoverable>
        <TableHeader>
            <TableRow>
                @foreach (var HEAD in TABLE_HEAD.Select((value, index) => new { value, index }))
                {
                    <TableHeaderCell>@HEAD.value.Label</TableHeaderCell>
                }
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (isFetching)
            {
                <TableRow>
                    <TableRowCell ColSpan="@TABLE_HEAD.Count">
                        <Text Color="Info">Loading...</Text>
                    </TableRowCell>
                </TableRow>
            }
            else if (recipes.Count == 0)
            {
                <TableRow>
                    <TableRowCell ColSpan="@TABLE_HEAD.Count">
                        <Text Color="Danger">No recipes available.</Text>
                    </TableRowCell>
                </TableRow>
            }
            else
            {
                @foreach (var recipe in recipes.Select((value, index) => new { value, index }))
                {
                    <TableRow>
                        <TableRowHeader>@(recipe.index + 1)</TableRowHeader>
                        <TableRowCell>@recipe.value.Title</TableRowCell>
                        <TableRowCell>
                            <Button Color="Color.Primary" Size="Size.Small" Clicked="() => HandleEdit(recipe.value.Id)" Disabled="@deletingRecipeIds.Contains(recipe.value.Id)" >
                                <Icon Name="IconName.Edit"></Icon>
                            </Button>
                            <Button Color="Color.Danger" Size="Size.Small" Clicked="() => HandleDelete(recipe.value.Id)" Disabled="@deletingRecipeIds.Contains(recipe.value.Id)">
                                @if (deletingRecipeIds.Contains(recipe.value.Id))
                                {
                                    <Text>Deleting</Text>
                                }
                                else
                                {
                                    <Icon Name="IconName.Delete"></Icon>
                                }
                            </Button>
                        </TableRowCell>
                    </TableRow>
                }
            }
        </TableBody>
    </Table>
</Container>

@code {
    public class TableHeadInfo
    {
        public string Label { get; set; } = null!;
    }

    readonly List<TableHeadInfo> TABLE_HEAD = new List<TableHeadInfo>
    {
        new TableHeadInfo
        {
            Label = "Id",
        },
        new TableHeadInfo
        {
            Label = nameof(GetRecipeResponseDto.Title),
        },
        new TableHeadInfo
        {
            Label = "Action",
        }
    };
    List<GetRecipeResponseDto> recipes = new();
    HashSet<string> deletingRecipeIds = new HashSet<string>(); // Track which recipes are being deleted
    bool isFetching = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            recipes = (await _recipeService.GetAllRecipesAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching recipes: {ex.Message}");
        }
        finally
        {
            isFetching = false;
        }
    }

    async Task HandleDelete(string id)
    {
        deletingRecipeIds.Add(id);  // Mark as deleting
        try
        {
            // await _recipeService.DeleteRecipeAsync(id);
            await Task.Delay(1000);
            recipes.RemoveAll(r => r.Id == id); // Remove recipe from the list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting recipe: {ex.Message}");
        }
        finally
        {
            deletingRecipeIds.Remove(id);  // Remove from deleting set after operation
        }
    }   
    void HandleEdit(string id)
    {
        Navigation.NavigateTo(RecipeWorld.Constants.RouteNames.Recipe.GetEditRoute(id));
    }
}
