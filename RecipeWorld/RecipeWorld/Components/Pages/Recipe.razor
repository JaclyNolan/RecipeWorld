@page "/recipes"
@inject IRecipeService _recipeService
@using RecipeWorld.Shared.Entities
@using RecipeWorld.Shared.DTOs
@using RecipeWorld.Services

<PageTitle>Recipe List</PageTitle>

<Container>
    <Table Hoverable>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Title</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (isFetching)
            {
                <TableRow>
                    <TableRowCell ColSpan="2">
                        <Text Color="Info">Loading...</Text>
                    </TableRowCell>
                </TableRow>
            }
            else if (recipes.Count == 0)
            {
                <TableRow>
                    <TableRowCell ColSpan="2">
                        <Text Color="Danger">No recipes available.</Text>
                    </TableRowCell>
                </TableRow>
            }
            else
            {
                @foreach (var recipe in recipes.Select((value, index) => new { value, index }))
                {
                    <TableRow>
                        <TableRowHeader>@(recipe.index + 1)</TableRowHeader>
                        <TableRowCell>@recipe.value.Title</TableRowCell>
                    </TableRow>
                }
            }
        </TableBody>
    </Table>
</Container>

@code {
    private List<GetRecipeResponseDto> recipes = new();
    private bool isFetching = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            recipes = (await _recipeService.GetAllRecipesAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching recipes: {ex.Message}");
        }
        finally
        {
            isFetching = false;
        }
    }
}
