@attribute [Route(RouteNames.Login)]
@using Microsoft.AspNetCore.Identity
@using RecipeWorld.Shared.Entities
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication.Cookies
@using RecipeWorld.Components.Account.Shared
@inject NavigationManager Navigation
@inject HttpClient client
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Log in</PageTitle>

<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="loginModel" method="post" OnValidSubmit="HandleLogin" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="loginModel.Username" class="form-control" autocomplete="username" placeholder="Username" />
                    <label for="username" class="form-label">Email</label>
                    <ValidationMessage For="() => loginModel.Username" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="loginModel.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="loginModel.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {

    private bool isLoading = false;

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel loginModel { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    void ClearErrors()
    {
        errorMessage = null;
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        ClearErrors();

        var result = await SignInManager.PasswordSignInAsync(loginModel.Username, loginModel.Password, loginModel.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Console.WriteLine("User logged in.");
            Navigation.NavigateTo(RouteNames.Index);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }

        isLoading = false;

        // var result = await CheckCredentials(loginModel.Username, loginModel.Password);

        // if (!result.Result)
        // {
        //     errorMessage = "Invalid login credentials. Please try again.";
        //     isLoading = false;
        //     return;
        // }

        // var claims = new List<Claim>
        // {
        //     new Claim(ClaimTypes.NameIdentifier, result.User!.Id.ToString()),
        // };

        // var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        // var principal = new ClaimsPrincipal(identity);
        // Navigation.NavigateTo(RouteNames.Login); to POST Login
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
